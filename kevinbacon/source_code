#!/usr/bin/env python3
"""
`kevinbacon` implementation and driver

@authors: Lara White
@version: 2023.12
"""

import argparse
import pathlib
import sys
import time

from pythonds3.graphs import Graph

from collections import deque


def read_file(filename: str) -> Graph:
    """Build a graph from the file"""
    the_graph: Graph = Graph()
    movie_actors = {}
    movie_indexes = dict()
    num_movies = 0
    all_movies = []

    with open(filename, "r") as file:
        for line in file:
            movie, actor = line.strip().split("|")
            if movie == "title":
                continue
            if movie not in movie_actors:
                movie_actors[movie] = []
            movie_actors[movie].append(actor)

    for movie, actors in movie_actors.items():
        if not movie in movie_indexes:
            movie_indexes[movie] = num_movies
            all_movies.append(movie)
            num_movies += 1

        movie_index = movie_indexes[movie]
        for i in range(len(actors)):
            for j in range(i + 1, len(actors)):
                the_graph.add_edge(actors[i], actors[j], movie_index)
                the_graph.add_edge(actors[j], actors[i], movie_index)
    the_graph.all_movies = all_movies
    return the_graph


def find_max_kbn_actors(graph: Graph) -> list[str]:
    """Find actor(s) with the highest KBN value"""
    max_kbn = 0
    kbn_actors = []
    for vertex in graph:
        if vertex.get_color() != "black":
            continue
        if vertex.distance >= max_kbn:
            if vertex.distance > max_kbn:
                kbn_actors = []
            max_kbn = vertex.distance
            kbn_actors.append(vertex.key)
    return kbn_actors


def traverse(starting_vertex):
    current = starting_vertex
    path = deque()
    while current:
        path.append(current)
        current = current.previous

    return path


def main():
    """Main function"""
    argparser = argparse.ArgumentParser()
    argparser.add_argument("actor", type=str, nargs="*")
    args = argparser.parse_args()

    print("Kevin Bacon number calculator")
    print("Reading the file")
    time_start = time.time()
    filename = "movie_actors_full.txt"
    if not pathlib.Path(filename).exists():
        filename = f"projects/kevinbacon/{filename}"
    the_graph = read_file(filename)
    time_end = time.time()
    elapsed = time_end - time_start
    print(f"File read in {elapsed:.2f} sec")
    print()

    print("Analyzing the graph")
    connections = 0
    for vertex in the_graph:
        connections = connections + len(vertex.get_neighbors())
    print(f"There are {len(the_graph)} connected actors in the file")
    print(f"There are {connections} connections between actors in the file")
    print()

    print("Finding paths")
    kevin = the_graph.get_vertex("Kevin Bacon")
    time_start = time.time()
    the_graph.bfs(kevin)
    time_end = time.time()
    elapsed = time_end - time_start
    print(f"Paths found in {elapsed:.2f} sec")
    print()

    print("Looking for actors with the highest Kevin Bacon number")
    time_start = time.time()
    high_kbn_lst = find_max_kbn_actors(the_graph)
    time_end = time.time()
    elapsed = time_end - time_start
    print(f"{len(high_kbn_lst)} actor(s) found in {elapsed:.2f} sec")
    print(
        "The following actor(s) have the Kevin Bacon number of "
        + f"{the_graph.get_vertex(high_kbn_lst[0]).get_distance()}:"
    )
    for name in high_kbn_lst:
        print(name)
    print()

    print("Finding paths")
    kevin = the_graph.get_vertex("Kevin Bacon")
    if kevin:
        the_graph.bfs(kevin)
        while True:
            actor_name = (
                " ".join(args.actor)
                if args.actor
                else input("Enter an actor's name (or press enter to exit): ")
            )
            if actor_name == "":
                break

            actor_vertex = the_graph.get_vertex(actor_name)
            if actor_vertex:
                path = traverse(actor_vertex)
                for i in range(1, len(path)):
                    first_actor = path[i - 1].key
                    second_actor = path[i].key
                    movie_index = path[i].get_neighbor(path[i - 1])
                    movie_title = the_graph.all_movies[movie_index]
                    print(
                        f"{i}) {first_actor} acted with {second_actor} in {movie_title}"
                    )

                print(f"{actor_name}'s Kevin Bacon number is {actor_vertex.distance}")
            else:
                print(f"Actor '{actor_name}' not found in the graph.")
            print()
    else:
        print("Kevin Bacon not found in the graph.")


if __name__ == "__main__":
    main()
